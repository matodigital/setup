#!/usr/bin/env bash
set -euo pipefail

RED='\033[0;31m'
YELLOW='\033[1;33m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m'

trap 'echo -e "${RED}[✗] Script failed at line $LINENO${NC}" >&2' ERR

usage() {
        echo -e "${YELLOW}Usage:${NC} $0 {common|ratpoison|sway}"
        exit 1
}

require_root() {
        if ! command -v sudo >/dev/null 2>&1; then
                echo -e "${RED}[✗] sudo not found. Please run as root or install sudo.${NC}" >&2
                exit 1
        fi
        if ! sudo -v; then
                echo -e "${RED}[✗] You must have sudo privileges to run this script.${NC}" >&2
                exit 1
        fi
}

install_packages() {
        if [[ ${#PKGS[@]} -gt 0 ]]; then
                echo -e "${BLUE}[*] Installing official repo packages...${NC}"
                sudo pacman -S --needed "${PKGS[@]}"
                echo -e "${GREEN}[✓] Official repo packages installed/verified!${NC}"
        else
                echo -e "${YELLOW}[!] No official repo packages to install.${NC}"
        fi
}

install_paru() {
        if ! command -v paru >/dev/null 2>&1; then
                echo -e "${BLUE}[*] Installing PARU...${NC}"
                tmpdir=$(mktemp -d)
                trap 'rm -rf "$tmpdir"' EXIT

                (
                        cd "$tmpdir"
                        git clone https://aur.archlinux.org/paru.git
                        cd paru
                        echo -e "${YELLOW}[!] Building PARU...${NC}"
                        makepkg -sirc
                )

                echo -e "${GREEN}[✓] PARU installed!${NC}"
        else
                echo -e "${GREEN}[✓] PARU already installed.${NC}"
        fi
}

install_aur_packages() {
        if [[ ${#AUR_PKGS[@]} -gt 0 ]]; then
                echo -e "${BLUE}[*] Installing AUR packages...${NC}"
                paru -S --needed "${AUR_PKGS[@]}"
                echo -e "${GREEN}[✓] AUR packages installed/verified!${NC}"
        else
                echo -e "${YELLOW}[!] No AUR packages to install.${NC}"
        fi
}

install_ratpoison() {
        local RATPOISON_INSTALLATION_SCRIPT="./ratpoison-setup"

        echo -e "${BLUE}Setting up Ratpoison environment...${NC}"

        if [ ! -e "$RATPOISON_INSTALLATION_SCRIPT" ]; then
                echo -e "${RED}Error:${NC} ${RATPOISON_INSTALLATION_SCRIPT} not found in $(pwd)"
                return 3
        fi

        if [ ! -x "$RATPOISON_INSTALLATION_SCRIPT" ]; then
                echo -e "${YELLOW}Making ${RATPOISON_INSTALLATION_SCRIPT} executable...${NC}"
                chmod +x "$RATPOISON_INSTALLATION_SCRIPT" || {
                        echo -e "${RED}Failed to chmod +x ${RATPOISON_INSTALLATION_SCRIPT}${NC}"
                        return 2
                }
        fi

        echo -e "${GREEN}Executing ${RATPOISON_INSTALLATION_SCRIPT}${NC}"
        "$RATPOISON_INSTALLATION_SCRIPT"
}

COMMON_PKGS=(
        7zip
        # asciinema
        # asciiquarium
        # astroterm
        # atac
        bc
        blueman
        bluez
        bluez-utils
        bridge-utils
        brightnessctl
        # btop
        # calcurse
        chafa
        chromium
        clang
        cmake
        cups
        cups-pdf
        dbeaver
        dmidecode
        dnsmasq
        docker
        fastfetch
        ffmpeg
        # figlet
        # firefox
        # font-manager
        fq
        freerdp
        fzf
        gammastep
        gdb
        gedit
        # ghidra
        ghostty
        # gimp
        git
        # gitu
        # glow
        # gnu-free-fonts
        go-yq
        # graphviz
        htop
        imagemagick
        imv
        iwd
        jc
        jdk-openjdk
        jdk17-openjdk
        # jdk21-openjdk
        jq
        # k9s
        # kdenlive
        kolourpaint
        # krita
        # lazydocker
        # lazygit
        less
        libreoffice-still
        libzip
        man-db
        mariadb
        # minikube
        mise
        mpv
        # ncdu
        neovim
        # networkmanager
        # newsboat
        ninja
        # noto-fonts-cjk
        obs-studio
        obsidian
        # pass
        # pastel
        pavucontrol
        # pipewire
        # pipewire-alsa
        # pipewire-pulse
        playerctl
        # podman
        # polkit
        poppler
        postgresql
        qemu-audio-spice
        qemu-base
        qemu-chardev-spice
        qt5ct
        qt6ct
        qutebrowser
        re2c
        remmina
        ripgrep
        # rnote
        rsync
        satty
        # snes9x-gtk
        solaar
        # sqlite
        # stow
        system-config-printer
        # task
        thunar
        # tlp
        tmux
        tree
        # ttf-nerd-fonts-symbols
        udiskie
        udisks2
        unrar
        unzip
        usbutils
        # valgrind
        # vifm
        virt-manager
        webkit2gtk-4.1
        wezterm
        wget
        xdg-desktop-portal
        xdg-desktop-portal-gtk
        # xf86-input-synaptics
        # xournalpp
        yazi
        yt-dlp
        zathura
        zathura-cb
        zathura-pdf-mupdf
        zathura-ps
        zed
        zip
)

RATPOISON_PKGS=(
        # arandr
        # dunst
        emacs
        maim
        screenkey
        slock
        xclip
        # xcolor
        xdotool
        xorg-server
        xorg-setxkbmap
        xorg-xev
        xorg-xinit
        xorg-xinput
        xorg-xrandr
        xterm
        xwallpaper
)

SWAY_PKGS=(
        emacs-wayland
        foot
        grim
        i3status
        mako
        qt5-wayland
        qt6-wayland
        slurp
        sway
        swaybg
        swayidle
        swaylock
        wev
        wf-recorder
        wl-clipboard
        wl-mirror
        wmenu
        wtype
        xdg-desktop-portal-wlr
)

COMMON_AUR_PKGS=(
        # android-studio
        # bemoji
        # cursor-bin
        # epson-inkjet-printer-escpr
        # google-chrome
        # localsend-bin
        # python-terminaltexteffects
        # xfce-polkit
)

RATPOISON_AUR_PKGS=()

SWAY_AUR_PKGS=(
        # wl-kbptr
        wshowkeys-git
)

if [[ $# -ne 1 ]]; then
        usage
fi

MODE="$1"
case "$MODE" in
common)
        PKGS=("${COMMON_PKGS[@]}")
        AUR_PKGS=("${COMMON_AUR_PKGS[@]}")
        ;;
ratpoison)
        PKGS=("${COMMON_PKGS[@]}" "${RATPOISON_PKGS[@]}")
        AUR_PKGS=("${COMMON_AUR_PKGS[@]}" "${RATPOISON_AUR_PKGS[@]}")
        ;;
sway)
        PKGS=("${COMMON_PKGS[@]}" "${SWAY_PKGS[@]}")
        AUR_PKGS=("${COMMON_AUR_PKGS[@]}" "${SWAY_AUR_PKGS[@]}")
        ;;
*)
        usage
        ;;
esac

require_root

echo -e "${BLUE}[*] Updating system...${NC}"
sudo pacman -Syu --noconfirm

install_packages
install_paru
install_aur_packages

case "$MODE" in
ratpoison)
        install_ratpoison
        ;;
esac

echo -e "${GREEN}[✓] All installations completed successfully!${NC}"
